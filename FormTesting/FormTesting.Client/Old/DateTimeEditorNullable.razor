<!-- Editor for Restaurant Config -->

@if (Value != null)
{
	<div class="form-group">
		@if (IsEditMode || Value != null)
		{
			<div class="form-label flex-row">
				@Name
				@if (!string.IsNullOrWhiteSpace(ToolTip))
				{
					<i class="far fa-info-circle text-info" style="margin-left: 1rem" title=@ToolTip></i>
				}
			</div>
		}
		@if (IsEditMode)
		{
			<div class="flex-row">
                @*TODO:Nullable <input class="form-control" type="date" min=@Min max=@Max @bind:get=Value @bind:set=ValueChanged @bind:event="oninput" />
				<input class="form-control" style="margin-left: 1rem" type="time" min=@Min max=@Max  @bind:get=Value @bind:set=ValueChanged @bind:event="oninput"  />*@
                <input class="form-control" type="date" min=@Min max=@Max @bind=@Value @bind:event="oninput" />
                <input class="form-control" style="margin-left: 1rem" type="time" min=@Min max=@Max  @bind=@Value @bind:event="oninput"  />
				<div class="flex-column">
					<div class="flex-fill"></div>
					<i class="far fa-times pointer fa-lg" @onclick=SetToNull style="margin-left: 1rem"></i>
					<div class="flex-fill"></div>
				</div>

			</div>
		}
		else
		{
			<div class="form-text">@Value</div>
		}
	</div>
}
else
{
	@if (IsEditMode)
	{
		<div class="rc-edit-btn" @onclick=SetValue>Add @Name</div>
	}
}


<!-- Adding Null condition -->

@code {
	[Parameter] public string Name { get; set; }
	[Parameter] public string ToolTip { get; set; }
	[Parameter] public DateTime? Min { get; set; }
	[Parameter] public DateTime? Max { get; set; }
	[Parameter] public bool IsEditMode { get; set; } = true;

	[Parameter] public DateTime? Value { get; set; }
	[Parameter] public EventCallback<DateTime?> ValueChanged { get; set; }
	async Task SetToNull()
	{
		Value = null;
		await ValueChanged.InvokeAsync(Value);
	}
	async Task SetValue()
	{
		Value = DateTime.UtcNow;
		await ValueChanged.InvokeAsync(Value);
	}
}