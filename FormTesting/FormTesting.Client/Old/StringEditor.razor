@inherits InputBase<string>


<div class="form-group">

    <div class="flex-row">
        <label for=@_id style="display: inline-block">@Name</label>
        @if (!string.IsNullOrWhiteSpace(ToolTip))
        {
            <div class="flex-column">
                <div class="flex-fill"></div>
                <i class="far fa-info-circle" title=@ToolTip></i>
                <div class="flex-fill"></div>
            </div>
        }
    </div>

    @if (IsEditMode)
    {
        @if (IsTextArea)
        {
            <textarea class="form-control" rows=@TextAreaRows id="text_area_edit_@Name" @bind:get=Value @bind:set=SetAsync @bind:event="oninput" @onkeyup:stopPropagation="true"> </textarea>
        }
        else
        {
            <input class="form-control" minlength=@MinLength @bind:get=Value @bind:set=SetAsync @bind:event="oninput" @onkeyup:stopPropagation="true" id=@Id />
        }
    }
    else
    {
        <div class="form-text">@((MarkupString)Value)</div>
    }
</div>


@code
{
    [Parameter] public bool IsTextArea { get; set; }

    [Parameter] public bool ShowName { get; set; } = true;
    [Parameter] public bool IsMarkup { get; set; }
    [Parameter] public int MaxWidth { get; set; } = 20;

    [Parameter] public bool IsEditMode { get; set; } = true;
    [Parameter] public int TextAreaRows { get; set; } = 3;
    [Parameter] public int? MinLength { get; set; }
    
    [Parameter] public string? Name { get; set; }
    [Parameter] public string? Id { get; set; }
    [Parameter] public string? ToolTip { get; set; }
    [Parameter] public string? ValidationMessage { get; set; }

    string? _id;

    protected override void OnInitialized()
    {
        // Ensure there is always an Id. Allow the users to set it manually, generate one from the Name, or generate a random one.
        _id = Id ?? Name?.Replace(" ", "");
        if (_id == string.Empty)
            _id = Guid.NewGuid().ToString();
        DisplayName = Name;
    }

    async Task SetAsync(string? value) => await ValueChanged.InvokeAsync(value);
    protected override bool TryParseValueFromString(string? value, out string result, out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }
}
