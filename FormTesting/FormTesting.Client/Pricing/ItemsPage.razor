@page "/pricing/items"
@inject IJSRuntime JS;

<PricingNavigationControl />
<PageTitle>Items List</PageTitle>

<style>
    .badge {
        margin-right: .5rem;
        margin-bottom: .2rem;
    }
</style>
<style>
    .card {
        padding: .5rem;
        margin-bottom: 1rem;
        margin-right: 1rem;
    }
</style>
<div >

    <div class="flex-row" >
                    
        <!-- Select Category Name -->
        <div class="form-group">
            <label>Category Names</label>
            <div></div>
            <select>
                @foreach (var t in _categoryNames)
                {
                    <option>@t</option>
                }
            </select>
        </div>


        <!-- Item Number Filter -->
        <div class="form-group" >
            <label>Item Number</label>
            <div></div>
            <input @bind=_filter @bind:event="oninput" style="width: 9rem" />
        </div>
        <div class="flex-column">
            <div class="flex-fill"></div>
            <button class="btn btn-primary" @onclick=Import>Import</button>
            <div class="flex-fill"></div>
        </div>

    </div>

    <!-- Table of ScrapingConfigurations -->
    <div>
        <table class="table table-hover" id="ttt">
            <thead>
                <tr>
                    <th scope="col" style="width: 9rem">Item Number</th>
                    <th scope="col">Category</th>
                    <th scope="col">IDS Description</th>
                    <th scope="col">Urls</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var configuration in FakePriceScrapingApp.ItemConfigurations.Where(IsVisible))
                {
                    <tr>
                        <td style="">@configuration.Id</td>
                        <td>@configuration.CategoryCode</td>
                        <td>@configuration.IdsDescription</td>
                        <td>@configuration.Urls.Count</td>
                        <td><a href="pricing/configure/@configuration.Id"><i class="fa-light fa-gear"></i></a> </td>
                    </tr>
                }
            </tbody>
        </table>


    </div>


</div>


@code {

    List<string> _categoryLevels = ["Major Category", "Ids Category", "Business Segment", "Product Type", "Family", "Segment"];
    List<string> _categoryNames = ["VERTICAL BROILERS", "STORAGE CONTAINERS", "CHEST FREEZERS", "COUNTERTOP HOOD REQUIRED", "INDUCTION EQUIPMENT", "RANGES"];

    string _filter = "";
    CategoryFilter _categoryFilter = new();

    bool _isImportActive = false;

    ItemsGroup _currentItemsGroup = new();

    protected override void OnInitialized()
    {
        FakePriceScrapingApp.Initialize();
        //FakePriceScrapingApp.User.SubscribedItemNumbers.Add("950AGM60Lcc");
        //FakePriceScrapingApp.User.SubscribedItemNumbers.Add("950AGM36Laa");
    }

    public bool IsVisible(ItemConfiguration x)
    {
        if (string.IsNullOrEmpty(_filter))
            return true;

        if (x.Id.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Id.StartsWith(_filter) || x.Id.StartsWith(_filter))
            return true;

        return false;
    }

    void ClickItem(string itemNumber)
    {
        // if (FakePriceScrapingApp.User.SubscribedItemNumbers.Contains(itemNumber))
        // {
        //     FakePriceScrapingApp.User.SubscribedItemNumbers.Remove(itemNumber);
        // }
        // else
        // {
        //     FakePriceScrapingApp.User.SubscribedItemNumbers.Add(itemNumber);
        // }
    }

    async Task Import()
    {
        _isImportActive = true;

        return;
        // This doens't work right now because of a bug in Blazor
        await JS.InvokeVoidAsync("console.log", "Hello");
        // Get the contents of the clipboard
        var clipboardText = await JS.InvokeAsync<string>("navigator.clipboard.readText");

        // Split the text into lines
        var lines = clipboardText.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);

        // Process each line
        foreach (var line in lines)
        {
            // Split the line into columns
            var columns = line.Split(',');

            // Check that the line has the correct number of columns
            if (columns.Length != 2)
            {
                // If not, show an error message
                continue;
            }

            // Check if the item is already in the list
            var configuration = FakePriceScrapingApp.ItemConfigurations.FirstOrDefault(x => x.Id == columns[0]);

            // If the configuration is null, add a new one
            if (configuration == null)
            {
                configuration = new ItemConfiguration
                    {
                        Id = columns[0],
                    };
                FakePriceScrapingApp.ItemConfigurations.Add(configuration);
            }

            // Add the URL to the configuration
            configuration.Urls.Add(new(columns[1]));
        }
    }


    public class CategoryFilter
    {
        public string IdsCategory { get; set; } = "";
        public string MajorCategory { get; set; } = "";
    }

}