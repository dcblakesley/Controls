@page "/pricing/imports"
@using System.Text.Json
@using System.Text.Json.Serialization

<PricingNavigationControl />
<PageTitle>Pricing Imports</PageTitle>

<h3>ImportsPage</h3>
<p>Paste in rows of ItemNumber and URL pairs, the data is expected to be copied from Excel and use tab separation</p>

<style>
    td { padding-right: 1rem; }
    th { padding-right: 1rem; }
</style>

@switch (_importStatus)
{
    case ImportStatus.NotStarted:
        <textarea @bind=_importData @bind:event="oninput" rows="10" style="width: 100%"></textarea>
        <button class="btn btn-primary" @onclick=Import>Validate</button>
        break;

    case ImportStatus.LocalValidationFailed:
        <h5 class="text-danger">Local Validation Failed</h5>

        <!-- Display the problems -->
        <table>
            <thead>
                <th>Line #</th>
                <th>Issue</th>
                <th>Text</th>
            </thead>
            <tbody>
                @foreach (var problem in _importProblems)
                {
                    <tr>
                        <td>@problem.Line</td>
                        <td>@problem.Issue</td>
                        <td>@problem.Text</td>
                    </tr>
                }
            </tbody>
        </table>

        break;

    case ImportStatus.Prepared:
        <!-- Display the prep results -->
        <h5>Local validation summary</h5>
        <table>
            <thead>
            <th>Item Number</th>
            <th>URLS</th>
            <th>Is Map</th>
            </thead>
            <tbody>
            @foreach (var item in _importRequest.Items)
            {
                <tr>
                    <td>@item.ItemNumber</td>
                        <td style="padding-left: 1rem">@item.Urls.Count</td>
                    <td>
                        @if(item.IsMap)
                        {
                            <i style="padding-left: 1rem" class="fa-solid fa-check"></i>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
        <button class="btn btn-primary" @onclick=ProcessImport>Process Import</button>
        break;
        case ImportStatus.Complete:
        <h5>Import Results</h5>
        <table>
            <thead>
            <th>Item Number</th>
            <th>URLS</th>
            <th>Is Map</th>
            <td>Configure</td>
            </thead>
            <tbody>
            @foreach (var item in _importRequest.Items)
            {
                <tr>
                    <td>@item.ItemNumber</td>
                    <td style="padding-left: 1rem">@item.Urls.Count</td>
                    <td>
                        @if(item.IsMap)
                        {
                            <i style="padding-left: 1rem" class="fa-solid fa-check"></i>
                        }
                    </td>
                        <td><a target="_blank" href="pricing/configure/950AGM36Laa"><i class="fa-light fa-gear"></i></a> </td>
                </tr>
            }
            </tbody>
        </table>
        break;
    default:
        <h2>Unexpected Status</h2>
        break;
}


@code {
    string _importData = "";
    readonly ImportRequest _importRequest = new();
    readonly List<LocalImportIssue> _importProblems = [];
    ImportStatus _importStatus = ImportStatus.NotStarted;

    protected override void OnInitialized()
    {
        FakePriceScrapingApp.Initialize();
    }

    void Import()
    {
        var data = _importData.Split("\n").Select(x => x.Split("\t")).ToList();
        //await JS.InvokeVoidAsync("console.log", data);

        List<ImportItemRow> importRows = [];
        _importProblems.Clear();
        _importRequest.Items.Clear();
        
        // Convert input text to importRows
        var lineCount = 0;
        foreach (var row in data.Where(x=>x != null && x.Any()))
        {
            lineCount++;
            Console.WriteLine(lineCount);
            switch (row.Length)
            {
                case 0:
                    // ignore empty lines
                    continue;
                case > 3:

                    var issue = new LocalImportIssue()
                    {
                        Line = lineCount,
                        Text = string.Join("\t", row),
                        Issue = "Too many columns"
                    };
                    _importProblems.Add(issue);

                    continue;
                default:
                {
                    var itemNumber = row[0];
                    var url = "";
                    var isMap = false;

                    if(row.Length >1)
                    {
                        url = itemNumber;
                    }
                    if(row.Length == 3)
                    {
                        isMap = row[2].ToLower() == "y";
                    }

                    importRows.Add(new()
                    {
                        ItemNumber = row[0],
                        IsMap = isMap,
                        Url = url
                    });
                    continue;;
                }
            }
        }

        // Text has invalid data
        if (_importProblems.Any())
        {
            _importStatus = ImportStatus.LocalValidationFailed;
            StateHasChanged();
            return;
        }

        // Data format is valid, attempt import

        // Convert ImportRows to ImportItems
        foreach (var importRow in importRows.Where(x=> !string.IsNullOrWhiteSpace(x.ItemNumber)))
        {
            var existingItem = _importRequest.Items.FirstOrDefault(x => x.ItemNumber == importRow.ItemNumber);
            if (existingItem == null)
            {
                existingItem = new()
                {
                    ItemNumber = importRow.ItemNumber,
                    IsMap = importRow.IsMap
                };
                _importRequest.Items.Add(existingItem);
            }

            // If any of the rows are marked as a map, the item is a map
            if (importRow.IsMap)
            {
                existingItem.IsMap = true;
            }

            if (importRow.Url != null) 
                existingItem.Urls.Add(importRow.Url);
        }
        _importStatus = ImportStatus.Prepared;

    }

    async Task ProcessImport()
    {
        _importStatus = ImportStatus.Complete;
        //var httpClient = new HttpClient();

        // var request = new GetItemDetailsFromContentRequest
        // {
        //     ItemNumbers = _importRequest.Items.Select(x => x.ItemNumber).ToList()
        // };
        // var address = "https://catalog.dev.webstaurantstore.com/wss/products?nocache=false&enqueueCacheUpdate=false";
        // var response = await httpClient.PostAsJsonAsync(address, request);
        // var content = await response.Content.ReadAsStringAsync();
        // var itemDetails = JsonSerializer.Deserialize<GetItemDetailsFromContentResponse>(content);
        // var x = itemDetails;
    }

    public string GetDomainFromUrl(string url)
    {
        url = url.Replace("https://", "").Replace("http://", "").Replace("www.", ""); //Remove the prefix
        var fragments = url.Split('/');
        return fragments[0];
    }

    public class ImportItemRow
    {
        public string? ItemNumber { get; set; }
        public string? Url { get; set; }
        public bool IsMap { get; set; }
    }

    public class ImportItem
    {
        public string? ItemNumber { get; set; }
        public bool IsMap { get; set; }
        public List<string> Urls { get; set; } = [];

        public string? ItemResult { get; set; }
        public int FailedUrlCount { get; set; }
        public int SuccessfulUrlCount { get; set; }
    }

    public class ImportRequest
    {
        public List<ImportItem> Items { get; set; } = [];
    }

    public class ImportResult
    {

    }

    class LocalImportIssue
    {
        public int Line { get; set; }
        public string? Text { get; set; }
        public string? Issue { get; set; }
    }

    enum ImportStatus
    {
        NotStarted,
        LocalValidationFailed,
        Prepared,
        Complete
    }

    public class GetItemDetailsFromContentRequest
    {
        public List<string?> ItemNumbers { get; set; } = [];
    }
    public class GetItemDetailsFromContentResponse
    {
        public List<ImportItem> Items { get; set; } = [];
    }
    
    public class ContentItemDetails
    {
        [JsonPropertyName("description")]
        public string? Description { get; set; }
    }

}