@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using Controls

@page "/"

<EditForm Model=_model FormName="MyAmazingFormName" @ref="editForm">
    <DataAnnotationsValidator />
@*     <ObjectGraphDataAnnotationsValidator />
 *@

    <style>
        .standard-width {
            width: @($"{_model.EditorWidth}px")
        }
        .w100{width: 100px}
        .description {
            margin: 0; padding: 0
        }
        h5 {
            color: blueviolet;
        }
        .fun{
            background-color: lime;
            color: magenta;
        }
    </style>
    
    <EditBool @bind-Value=_model.EditBool Field=@(() => _model.EditBool) />

    <div class="flex-row">
        <h5>General Usage</h5>
        <ul style="margin-right: 2rem">
            <li>The controls are all setup to provide a consistent look and feel with minimal markup.</li>
            <li>They each provide a Label, Description, Input/Control and Validation</li>
        </ul>
        <EditNumber @bind-Value=_model.EditorWidth Field=@(() => _model.EditorWidth) class="w100" Step=50 />
    </div>
    <div style="margin-left: 3rem">
        <EditString @bind-Value=_model.Label Field=@(() => _model.Label) class="standard-width" Placeholder="Input/Control with placeholder text" />
    </div>
        
    <div class="flex-row">
    <h5>Labels</h5>
    <ul>
        <li>Default behavior - Automatically generated from the Property Name</li>
        <li>Spaces are added based on PascalCasing</li>
        <li>Override the Label by using the [DisplayName] Attribute</li>
        <li>Can also be set directly in the markup</li>
        <li>markup can be embedded in the DisplayName attribute or set in markup</li>
        </ul>
    </div>
    <div class="flex-row flex-wrap">
        <EditString @bind-Value=_model.Name       Field=@(() => _model.Name)       class="standard-width" IsEditMode=false MaskText="****" />
        <EditString @bind-Value=_model.Name  Field=@(() => _model.Name)  class="standard-width"/>
        <EditString @bind-Value=_model.MiddleName Field=@(() => _model.MiddleName) class="standard-width"/>
        <EditString @bind-Value=_model.LastName   Field=@(() => _model.LastName)   class="standard-width"/>
    </div>
    
    <div class="flex-row">
    <h5>Descriptions</h5>
    <ul>
        <li>Optional</li>
        <li>Appear under the label</li>
        <li>Support markup</li>
        </ul>
    </div>
    <div class="flex-row flex-wrap">
        <EditString @bind-Value=_model.Dog Field=@(() => _model.Dog) class="standard-width" />
        <EditString @bind-Value=_model.Cat Field=@(() => _model.Cat) class="standard-width" />
    </div>
    
    <div class="flex-row">
        <h5>Validation</h5>
        <ul>
            <li>Utilizes DataAnnotations</li>
            <li>Allows displaying Markup</li>
        </ul>
    </div>
    <div class="flex-row flex-wrap">
        <EditString @bind-Value=_model.Horse Field=@(() => _model.Horse) class="standard-width" />
        <EditString @bind-Value=_model.Zebra Field=@(() => _model.Zebra) class="standard-width" />
        <EditString @bind-Value=_model.Lion  Field=@(() => _model.Lion) class="standard-width" />
        <EditString @bind-Value=_model.Tiger Field=@(() => _model.Tiger) class="standard-width" />
    </div>

    <h5>Controls</h5>
    <div class="flex-row flex-wrap">
        <EditString   @bind-Value=_model.EditString   Field=@(() => _model.EditString)   class="standard-width"/>
        <EditTextArea @bind-Value=_model.EditTextArea Field=@(() => _model.EditTextArea) class="standard-width"/>
        <EditNumber   @bind-Value=_model.EditNumber   Field=@(() => _model.EditNumber)   class="standard-width"/>
        <EditBool     @bind-Value=_model.EditBool     Field=@(() => _model.EditBool)     class="standard-width"/>
    </div>
    <div class="flex-row flex-wrap">
        <EditDate @bind-Value=_model.EditDate Field=@(() => _model.EditDate) class="standard-width" />
@*          <EditSelectEnum Type=typeof(AnimalType) @bind-Value=@_model!.EditSelectEnum Field=@(() => @_model.EditSelectEnum) class="standard-width" />
 *@         <EditSingleStringSelect Options=@_colorOptions @bind-Value=@_model!.EditSelectString Field=@(() => _model!.EditSelectString) />
    </div> 
    
    <h5>EditSelectString</h5>
    <p>Binds to a string, with an input List of strings for the options </p>
    <div class="flex-row">
        <EditSingleStringSelect Options=@_colorOptions @bind-Value=@_model.EditSelectString Field=@(() => _model.EditSelectString) HasOther=true HasRadioButtons=true />
        <EditSingleStringSelect Options=@_colorOptions @bind-Value=@_model.EditSelectString Field=@(() => _model.EditSelectString) HasOther=true HasRadioButtons=true HasHorizontalRadioButtons=true />
        <EditSingleStringSelect Options=@_colorOptions @bind-Value=@_model.EditSelectString Field=@(() => _model.EditSelectString) HasOther=true class="w100" />
        <EditSingleStringSelect Options=@_colorOptions @bind-Value=@_model.EditSelectString Field=@(() => _model.EditSelectString) HasOther=true /> 
    </div>
    <h5 style="color: @_model.EditSelectString">@_model.EditSelectString</h5>

</EditForm>

@code {
    readonly Person _model = new();
    EditForm editForm; // Set by @ref during Render
    List<string> _colorOptions = new() { "Red", "Green", "Blue", "Yellow", "Orange", "Purple", "Black", "White" };

    // Forces validation to show up immediately, it typically only shows up after a field has been touched
    protected override void OnAfterRender(bool firstRender) => editForm!.EditContext!.Validate();

    class Animal
    {
        [Required]
        public string Name { get; set; } = ""; 
    }

    class Person
    {
        [ValidateComplexType]
        public Animal Animal { get; set; } = new();

        // Width
        public int EditorWidth { get; set; } = 400;
        [MinLength(1)]
        public string? Label { get; set; } 

        // Labels
        public string Name { get; set; } = "abcdefghijklmnopqrstuvwxyz";
        public string FirstName { get; set; } = "";
        [DisplayName("MiddleName modified with [DisplayNameAttribute]")]
        public string MiddleName { get; set; } = "";
        [DisplayName("<span style='color: cyan'>Last </span><span style='color: lime'>Name</span><span style='color: magenta'> with embedded html</span>")]
        public string LastName { get; set; } = "";

        // Descriptions
        [Description("This is a description for Dog")]
        public string Dog { get; set; } = "";
        [Description("<div style='color: lime; font-weight: bold'>Cats don't like dogs or water</div>")]
        public string Cat { get; set; } = "";

        // Validation
        [Required]
        public string Horse { get; set; } = "";
        [Required(ErrorMessage = "<div style='color: lime; font-weight: bold'>Required: Zebras don't like<ul><li style=\"color: red\">Lions</li><li style=\"color: cyan\">Newspapers</li></ul></div>")]
        public string Zebra { get; set; } = "";
        [MinLength(3)] public string Lion { get; set; } = "a";
        [MaxLength(5)] public string Tiger { get; set; } = "abcdefghi";

        // Controls
        [DisplayName("EditString")]       public string     EditString       { get; set; } = "";
        [DisplayName("EditTextArea")]     public string     EditTextArea     { get; set; } = "";
        [DisplayName("EditNumber")]       public double     EditNumber       { get; set; } = 2.5;
        [DisplayName("EditBool")]         public bool       EditBool         { get; set; }
        [DisplayName("EditDate")]         public DateTime   EditDate         { get; set; } = DateTime.UtcNow;
        [DisplayName("EditSelectEnum")]   public AnimalType EditSelectEnum   { get; set; }
        [DisplayName("EditSelectString")] public string     EditSelectString { get; set; } = "Orange";

    }

    public enum AnimalType
    {
        Cat = 0,

        [EnumDisplayName("Puppy Dog")]
        Dog = 1,

        [EnumDisplayName("Tweety Bird")]
        Bird = 2,

        [EnumDisplayName("Gold Fish")]
        Fish = 3
    }
}
