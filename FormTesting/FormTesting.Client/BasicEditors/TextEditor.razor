@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using System.Reflection
@using FormTesting.Client.Pages
@inherits InputBase<string>

<div class="form-group">
    <InputLabel Id=@_id Name=@_name IsRequired=@_isRequired />
    @if (_description != null)
    {
        <div class="description">@((MarkupString)_description)</div>
    }

    <input @bind="CurrentValue" id=@_id data-test-id=@_id class=@Css />

    
    <FieldValidationDisplay EditContext=EditContext FieldIdentifier=_fieldIdentifier Attributes=_attributes />
</div>

@code {

    [Parameter] public string? Id { get; set; }
    [Parameter] public required Expression<Func<string>> Field { get; set; }
    [Parameter] public string Css { get; set; } = "";

    bool _isRequired;
    string _id = string.Empty;
    string _name = string.Empty;
    string? _description;
    List<Attribute> _attributes;
    FieldIdentifier _fieldIdentifier;

    // Get validation messages for FieldName
    // 
    protected override void OnInitialized()
    {
        _fieldIdentifier = FieldIdentifier.Create(Field);
        _attributes = AttributesHelper.GetExpressionCustomAttributes(Field);
        _name = AttributesHelper.GetLabelText(_attributes, _fieldIdentifier);
        _id = AttributesHelper.GetId(Id, _name);
        _description = AttributesHelper.GetDescription(_attributes);
        // RequiredAttribute, StringLengthAttribute, MinLengthAttribute

        foreach (var attr in _attributes)
        {
           
            var x = attr;
@*                 if(attr is MaxLengthAttribute maxLengthAttribute)
            {
                // Do what you want with maxLengthAttribute     
            } *@
        }

    }



    protected override bool TryParseValueFromString(string? value, out string result, out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }



}