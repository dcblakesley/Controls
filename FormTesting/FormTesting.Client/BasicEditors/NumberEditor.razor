@inherits InputNumber<T>
@using System.Linq.Expressions
@typeparam T

<div class="form-group">
    <FormLabel Id=@_id Name=@_name IsRequired=@_isRequired Description=@_description />

    <input type="number" id="@Id" @bind-value="@CurrentValueAsString" @bind-value:event="oninput" />

    <FieldValidationDisplay EditContext=EditContext FieldIdentifier=_fieldIdentifier Attributes=_attributes />
</div>

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public required Expression<Func<T>> Field { get; set; }
    [Parameter] public string Css { get; set; } = "";

    bool _isRequired;
    string _id = string.Empty;
    string _name = string.Empty;
    string? _description;
    List<Attribute> _attributes;
    FieldIdentifier _fieldIdentifier;

    // Get validation messages for FieldName
    protected override void OnInitialized()
    {
        _fieldIdentifier = FieldIdentifier.Create(Field);
        _attributes = AttributesHelper.GetExpressionCustomAttributes(Field);
        _name = AttributesHelper.GetLabelText(_attributes, _fieldIdentifier);
        _id = AttributesHelper.GetId(Id, _name);
        _description = AttributesHelper.GetDescription(_attributes);
        // RequiredAttribute, StringLengthAttribute, MinLengthAttribute

        foreach (var attr in _attributes)
        {
           
            var x = attr;
            @*                 if(attr is MaxLengthAttribute maxLengthAttribute)
            {
                // Do what you want with maxLengthAttribute     
            } *@
        }
     }
}