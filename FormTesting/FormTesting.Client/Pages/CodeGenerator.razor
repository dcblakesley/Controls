@page "/CodeGenerator"

<h3>CodeGenerator</h3>

<textarea style="width: 100%" @bind=@_text rows="8"></textarea>
<button @onclick=Generate>Generate</button>
<textarea style="width: 100%" @bind=@_output rows="8"></textarea>

@code {
    string _text = "";
    string _output = "";
    readonly List<Property> _properties = [];

    private void Generate()
    {
        CreatePropertiesFromInputText();
        
        // Create the output
        _output = "";
        _output = CreateRazorOutput();
    }

    void CreatePropertiesFromInputText()
    {
        _properties.Clear();
        var lines = _text.Split("\n");
        foreach (var line in lines)
        {
            try
            {
                var parts = line.Split("\t");

                // ClassName /t Type /t PropertyName
                var className = parts[0];
                var type = parts[1];
                var propertyName = parts[2];

                var classes = className.Split('.');

                // Add the property for the current class
                var thisClass = classes.Last();
                AddProperty(thisClass, type, propertyName, className);

                // Add the properties for the parent classes
                // for (var i = classes.Length - 2; i >= 0; i--)
                // {
                //     AddProperty(classes[i], classes[i + 1], propertyName, propertyName);
                // }
            }
            catch
            {
                // ignored
            }
        }
    }
    void AddProperty(string className, string type, string propertyName, string fullClassName)
    {
        propertyName = char.ToUpper(propertyName[0]) + propertyName[1..];
        className = char.ToUpper(className[0]) + className[1..];
        _properties.Add(new(className, type, propertyName, fullClassName));
    }
    string CreateClassesOutput()
    {
        var output = "";
        var classNames = _properties.Select(x => x.ClassName).Distinct().OrderBy(x => x).ToList();
        foreach (var className in classNames)
        {
            _output += $"public class {className}\n";
            _output += "{\n";
            foreach (var property in _properties.Where(x => x.ClassName ==className))
            {
                _output += $"public {property.Type} {property.PropertyName} {{ get; set; }}\n";
            }
            output += "}\n\n";
        }
        return output;
    }

    string CreateRazorOutput()
    {
        var output = "";
        // the model is the base class
        var modelName = _properties.First().ClassName.Split('.').First();

        // style
        output += $"@page \"/{modelName}\"\n\n";
        output += $"<h3>{modelName}</h3>\n\n";
        output += $"<EditForm Model={modelName} OnValidSubmit=Submit FormName=\"{modelName}Form\">\n";
        output += "<DataAnnotationsValidator />";

        // properties
        foreach (var property in _properties)
        {
            var start = property.Type switch
            {
                "string" => "EditString",
                "int" => "EditNumber",
                "float" => "EditNumber",
                "double" => "EditNumber",
                "decimal" => "EditNumber",
                "DateTime" => "EditDate",
                "bool" => "EditBool",
                _ => ""
            };
            output += $"<{start} " +
                      $"@bind-Value={property.FullClassName}.{property.PropertyName} " +
                      $"Field=@(() => {property.FullClassName}.{property.PropertyName}) " +
                      $"Css=\"w200\" />\n";
        }

        output += "</EditForm>\n\n";
        output += "@code {\n";
        output += $"    private {modelName}? {modelName} {{ get; set; }}\n\n";
        output += "    protected override void OnInitialized()\n";
        output += "    {\n";
        output += "        // Initialize the model\n";
        output += "    }\n\n";
        output += "    private void Submit()\n";
        output += "    {\n";
        output += "        // Submit the model\n";
        output += "    }\n";
        output += "}\n";

        return output;
    }

    record Property(string ClassName, string Type, string PropertyName, string FullClassName);

}
}
