@page "/"
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using FormTesting.Client.BasicEditors
@using DisplayNameAttribute = FormTesting.Client.BasicEditors.DisplayNameAttribute


<h1>Starfleet Starship Database</h1>

<h2>New Ship Entry Form</h2>



<EditForm Model="Model" OnValidSubmit="Submit" FormName="Starship3">
    <DataAnnotationsValidator />
@*     <ValidationSummary />
    @foreach (var message in context.GetValidationMessages())
    {
        <div style="color: yellow">@message</div>
    } *@
    <TextEditor Css="w500" @bind-Value="Model!.Id" Field=@(() => Model.Id) />
    <TextEditor Css="w500" @bind-Value="Model!.UsersFavoriteColor" Field=@(() => Model.UsersFavoriteColor) />
@*     <TextEditor Css="w500" @bind-Value="Model!.S1" Field=@(() => Model.S1) />
    <TextEditor Css="w500" @bind-Value="Model!.S2" Field=@(() => Model.S2) /> *@
    <TextAreaEditor Css="w500" @bind-Value="Model!.Description" Field=@(() => Model!.Description) />
    <NumberEditor @bind-Value="Model!.IntNumber" Field=@(() => Model!.IntNumber) />
    <NumberEditor @bind-Value="Model!.DoubleNumberMin5" Field=@(() => Model!.DoubleNumberMin5) />

    <div>
        <label>
            Primary Classification: 
            <InputSelect @bind-Value="Model!.Classification">
                <option value="">
                    Select classification ...
                </option>
                <option checked="@(Model!.Classification == "Exploration")" 
                        value="Exploration">
                    Exploration
                </option>
                <option checked="@(Model!.Classification == "Diplomacy")" 
                        value="Diplomacy">
                    Diplomacy
                </option>
                <option checked="@(Model!.Classification == "Defense")" 
                        value="Defense">
                    Defense
                </option>
            </InputSelect>
        </label>
    </div>

    <div>
        <label>
            Engineering Approval: 
            <InputCheckbox @bind-Value="Model!.IsValidatedDesign" />
        </label>
    </div>
    <div>
        <label>
            Production Date: 
            <InputDate @bind-Value="Model!.ProductionDate" />
        </label>
    </div>
    <div>
        @if(context.GetValidationMessages().Any())
        {
            <button class="btn disabled" type="submit">Submit</button>
        }else{
            <button class="btn btn-secondary" type="submit">Submit</button>
        }
    </div>
</EditForm>



@code{

    [SupplyParameterFromForm]
    private Starship? Model { get; set; }

    protected override void OnInitialized()
    {
        Model ??= new() { ProductionDate = DateTime.UtcNow };
        
        // Get the DisplayName of Starship.Id
        var x = GetName<Starship>(nameof(Model.Id));
    }

    string GetName<T>(string propertyName)
    {
        PropertyInfo? propInfo = typeof(T).GetProperty(propertyName);
        if (propInfo != null)
        {
            var displayNameAttribute = propInfo.GetCustomAttribute<DisplayNameAttribute>();
            if (displayNameAttribute != null)
            {
                return displayNameAttribute.Value;
            }
        }
        return propertyName;
    }

    private void Submit()
    {
        Console.WriteLine("Id = {Id} Description = {Description} " +
                              "Classification = {Classification} MaximumAccommodation = " +
                              "{MaximumAccommodation} IsValidatedDesign = " +
                              "{IsValidatedDesign} ProductionDate = {ProductionDate}",
            Model?.Id, Model?.Description, Model?.Classification,
            Model?.IntNumber, Model?.IsValidatedDesign,
            Model?.ProductionDate);
    }
    public class Starship
    {
        [Required]
        [DisplayName("DisplayName, Max=16, Min=3, Required")]
        [StringLength(16)]
        [MinLength(3)]
        [Description("This is the unique identifier for the <span style='color: cyan'>starship.</span>")]
        public string Id { get; set; } = "";

        public string UsersFavoriteColor { get; set; } = string.Empty;
        public string S1 { get; set; }  = string.Empty;
        public string S2 { get; set; } = string.Empty;
        public string S3 { get; set; } = string.Empty;

        [Required]
        public string Description { get; set; } = string.Empty;

        [Required]
        public string? Classification { get; set; }

        [Range(1, 100000, ErrorMessage = "Accommodation invalid (1-100000).")]
        public int IntNumber { get; set; }

        [Required]
        public double? DoubleNumberMin5 { get; set; }

        [Required]
        [Range(typeof(bool), "true", "true", ErrorMessage = "Approval required.")]
        public bool IsValidatedDesign { get; set; }

        [Required]
        public DateTime ProductionDate { get; set; }
    }


}