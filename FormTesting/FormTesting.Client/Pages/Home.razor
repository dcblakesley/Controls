@page "/"
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Controls

<h1>Starfleet Starship Database</h1>

<h2>New Ship Entry Form</h2>

<input type="tel" id="phone" name="phone" pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}" required />

<h3>abc</h3>

<EditForm Model=Model OnValidSubmit=Submit FormName="Starship3" style="padding: 1rem">
    <DataAnnotationsValidator />
    <EditString @bind-Value=Model!.PhoneNumber Field=@(() => Model!.PhoneNumber) />

    <EditNumber @bind-Value=Model!.IntNumber Field=@(() => Model!.IntNumber) />
    <EditNumber @bind-Value=Model!.DoubleNumber Field=@(() => Model!.DoubleNumber) />
    <EditBool @bind-Value=Model!.IsValidatedDesign Field=@(() => Model!.IsValidatedDesign) />

    <EditSelectEnum Css="w200" Type=typeof(AnimalType) @bind-Value=@Model!.Animal Field=@(() => Model.Animal) />
@*     <EditSelectIntId Options=Model!.People @bind-Value=Model!.SelectedPerson Field=@(() => Model!.SelectedPerson) />
 *@ 
    <div class="flex-row flex-wrap">
        <EditString Css="w300" @bind-Value=Model!.Id Field=@(() => Model.Id) />
        <EditString Css="w500" @bind-Value=Model!.UsersFavoriteColor Field=@(() => Model.UsersFavoriteColor) />
        <EditTextArea Css="w500" @bind-Value=Model!.Description Field=@(() => Model!.Description) />
    </div>

    <EditDate @bind-Value="Model!.ProductionDate" Field=@(() => Model!.ProductionDate) Type="InputDateType.Month" />
    

    <div>
        <label>
            Production Date:
            <InputDate @bind-Value="Model!.ProductionDate" Type="InputDateType.Month" />
        </label>
    </div>
    <div>
        <label>
            Date 2:
            <input @bind-value="@Model!.ProductionDate" />
        </label>
    </div>
    <div>
        @if (context.GetValidationMessages().Any())
        {
            <button class="btn disabled" type="submit">Submit</button>
        }
        else
        {
            <button class="btn btn-secondary" type="submit">Submit</button>
        }
    </div>
    <div>
        <label>
            Primary Classification:
            <InputSelect @bind-Value="Model!.Classification">
                @foreach (var option in _options)
                {
                    <option value=@option.Value>@option.Text</option>
                }
            </InputSelect>
        </label>
    </div>
</EditForm> 



@code{

    public record StringOption(string Value, string Text);
    List<StringOption> _options =
    [
        new("", "Select classification ..."),
        new("Exploration", "Exploration"),
        new("Diplomacy", "Diplomacy"),
        new ("Defense", "Defense")
    ];

    [SupplyParameterFromForm]
    private Starship? Model { get; set; }


    protected override void OnInitialized()
    {
         Model ??= new()
         {
             //ProductionDate = DateTime.UtcNow 
         };
        
        // Get the DisplayName of Starship.Id
        //var x = GetName<Starship>(nameof(Model.Id));
    }
    string GetName<T>(string propertyName)
    {
        PropertyInfo? propInfo = typeof(T).GetProperty(propertyName);
        if (propInfo != null)
        {
            var displayNameAttribute = propInfo.GetCustomAttribute<DisplayNameAttribute>();
            if (displayNameAttribute != null)
            {
                return displayNameAttribute.DisplayName;
            }
        }
        return propertyName;
    }
    void Submit()
    {
        // Console.WriteLine("Id = {Id} Description = {Description} " +
        //                       "Classification = {Classification} MaximumAccommodation = " +
        //                       "{MaximumAccommodation} IsValidatedDesign = " +
        //                       "{IsValidatedDesign} ProductionDate = {ProductionDate}",
        //     Model?.Id, Model?.Description, Model?.Classification,
        //     Model?.IntNumber, Model?.IsValidatedDesign,
        //     Model?.ProductionDate);
    }
    public class Starship
    {
        [RegularExpression("^(\\+\\d{1,2}\\s?)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$\r\n", ErrorMessage = "Must be a valid phone number")]
        public string PhoneNumber { get; set; }

        //[DisplayName("Blah")]
        //public IIntIdAndName SelectedPerson { get; set; } = new();
        //public List<IIntIdAndName> People { get; set; } = [new Person(1, "Ted"), new Person(2, "Bill"), new Person(3, "Sue")];
        
        [DisplayName("Abacabb")]
        public AnimalType Animal { get; set; } 

        [Required,StringLength(16), MinLength(3), DisplayName("DisplayName, Max=16, Min=3, Required")]
        //[Description("This is the unique identifier for the <span style='color: cyan'>starship.</span>")]
        public string Id { get; set; } = "";

        public string UsersFavoriteColor { get; set; } = string.Empty;

        [Required]
        public string Description { get; set; } = string.Empty;

        [Required]
        public string? Classification { get; set; }

        [Range(1, 100000, ErrorMessage = "Accommodation invalid (1-100000).")]
        public int IntNumber { get; set; }

        [Required]
        public double? DoubleNumber { get; set; }

        [Required]
        [DisplayName("Engineering Approval")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "Approval required.")]
        public bool IsValidatedDesign { get; set; }

        
        [Required] public DateTime? ProductionDate { get; set; } = DateTime.UtcNow;
    }

    public enum AnimalType
    {
        Cat = 0,

        [EnumDisplayName("Puppy Dog")]
        Dog = 1,

        [EnumDisplayName("Tweety Bird")]
        Bird = 2,

        [EnumDisplayName("Gold Fish")]
        Fish = 3
    }

    public class Person : IIntIdAndName
    {
        // Constructors
        public Person() { }
        public Person(int id, string name)
        {
            Id = id;
            Name = name;
        }

        public int Id { get; set; }
        public string? Name { get; set; }

    }
}