@page "/configure/{ItemNumber}"
@using FormTesting.Client.BasicEditors
@inject NavigationManager Navigation

@if (ItemNumber == null)
{
    <h1>Item Number is null</h1>
}
@if(_configuration == null)
{
    <h1>Configuration not found</h1>
}
else
{
    <button @onclick=Back>Back</button>
    <EditForm Model=_configuration OnValidSubmit="Submit" FormName="Starship3">
        <DataAnnotationsValidator/>
        
        <!-- Basic Info -->
        <div class="flex-row">
            <TextEditor Css="w300" @bind-Value="_configuration!.Id" Field=@(() => _configuration.Id) IsEditMode=false />
            <TextEditor Css="w800" @bind-Value="_configuration!.ProductName" Field=@(() => _configuration.ProductName) IsEditMode=false />
            <TextEditor Css="w200" @bind-Value="_configuration!.CategoryCode" Field=@(() => _configuration.CategoryCode) IsEditMode=false />
            
            
            <!-- Select Category Level -->
            <div class="form-group">
                <label>Schedule</label>
                <div></div>
                <select>
                    @foreach (var t in FakePriceScrapingApp.Schedules)
                    {
                        <option>@t.Name</option>
                    }
                </select>
            </div>

            <h6>Last Run: 6/4/24 5:13pm</h6>
            <i class="fa-sharp fa-regular fa-2x fa-circle-play pointer" style="color: green; margin-left: 2rem"></i>
        </div>

    </EditForm>
        <!-- Recent Runs -->
        
        <!-- Tabs -->
    <div class="">
        <style>
            .fff{
                padding: .25rem;
                border: 1px white;
                cursor: pointer;           
            }
        </style>
        <div class="flex-row">
            <div class="fff" style="@(!_configureUrls ? "background: darkgreen" : "")" @onclick=@(() => ClickTab(false))>Results</div>
            <div class="fff" style="@(_configureUrls ? "background: darkgreen" : "")" @onclick=@(() => ClickTab(true))>Configure Urls</div>
        </div>

        @if (_configureUrls)
        {
            <!-- Configure Urls -->
            <button @onclick=@(() => _configuration.Urls.Add(new("")))><i class="fa-duotone fa-plus"></i></button>
            <table class="table table-hover">
                <thead>
                <tr>
                    <th scope="col">Link</th>
                    <th scope="col" style="width: 80px">Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var url in _configuration.Urls)
                {
                    <tr>
                        <td>
                            <input style="width: 100%" @bind=url.Url/></td>
                        <td>
                            <button title="Delete"><i class="fa-sharp fa-regular fa-times"></i></button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            <!-- Results -->
            <table class="table table-hover">
                <thead>
                <tr>
                    <th scope="col">Link</th>
                    <th scope="col" style="width: 160px">Advertised Price</th>
                    <th scope="col" style="width: 120px">Cart Price</th>
                    <th scope="col" style="width: 120px">Login Price</th>
                    <th scope="col" style="width: 80px">Warnings</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var result in FakePriceScrapingApp.ScrapingResults.First().Results)
                {
                    <tr>
                        <td><a href=@result.Url>@GetDomainFromUrl(result.Url)</a></td>
                        <td>$@result.PdpPrice</td>
                        <td>$@result.CartPrice</td>
                        <td>$@result.LoggedInPrice</td>
                        <td>
                            @if (result.HasIssues)
                            {
                                <i style="color: red" class="far fa-lg fa-exclamation-circle"></i>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
    <h6 class="text-success">Configure ItemNumbers Page</h6>
    <p>Allows a user to edit the URLs to scrape, see the latest(or more) results and manually trigger a scraper run for each URL</p>

}



@code {
    [Parameter]
    public string? ItemNumber { get; set; }

    bool _configureUrls = false;

    ProductScrapingConfiguration? _configuration;

    public void ClickTab(bool value)
    {
        _configureUrls = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        FakePriceScrapingApp.Initialize();
        if (ItemNumber == null)
        {
            return;
        }

        _configuration = FakePriceScrapingApp.ScrapingConfigurations.FirstOrDefault(x => x.Id == ItemNumber);
        if (_configuration == null)
        {
            return;
        }
    }
    void Submit()
    {
        Console.WriteLine("submitted");
    }

    void Back()
    {
        Navigation.NavigateTo("/");
    }

    public string GetDomainFromUrl(string url)
    {
        url = url.Replace("https://", "").Replace("http://", "").Replace("www.", ""); //Remove the prefix
        string[] fragments = url.Split('/');
        return fragments[0];
    }
}