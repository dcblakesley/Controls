@using Microsoft.AspNetCore.Components.Forms
@inherits InputCheckbox

<div class="form-group">
    <FormLabel Id=@_id FieldIdentifier=@_fieldIdentifier Attributes=@_attributes Label=@Label />    

    @if (IsEditMode)
    {
        <input type="checkbox" id=@_id data-test-id=@_id @bind-value=@CurrentValue @bind-value:event="oninput" checked=@CurrentValue />
    }
    else
    {
        <input type="checkbox" disabled id=@_id data-test-id=@_id @bind-value=@CurrentValue @bind-value:event="oninput" checked=@CurrentValue />
    }

    <FieldValidationDisplay FieldIdentifier=_fieldIdentifier Attributes=_attributes />
</div>


@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public required Expression<Func<bool>> Field { get; set; }
    [Parameter] public string Css { get; set; } = "";
    [Parameter] public bool IsEditMode { get; set; } = true;
    [Parameter] public string? Label { get; set; }

    string _id = string.Empty;
    List<Attribute>? _attributes;
    FieldIdentifier _fieldIdentifier;

    // Get validation messages for FieldName
    protected override void OnInitialized()
    {
        _fieldIdentifier = FieldIdentifier.Create(Field);
        _attributes = AttributesHelper.GetExpressionCustomAttributes(Field);
        _id = AttributesHelper.GetId(Id, FieldIdentifier);
        Console.WriteLine($"_id: {_id} - Id: {Id} - FieldIdentifier: {FieldIdentifier}");
    }
}