@using Microsoft.AspNetCore.Components.Forms

<h1>Common Features Demo</h1>

<style>
    .demo-section {
        width: 49%;
    }

</style>

<EditForm Model="@_model" class="flex-row flex-wrap" style="flex-basis: 25%" @ref=_form>
    <ObjectGraphDataAnnotationsValidator />



    <!-- Label -->
    <div class="demo-section">
        <h2>FormLabel / Label Demo</h2>
        <ul>
            <li>Labels are automatically generated based on the property name.</li>
            <li>Override chain</li>
            <li>AutoGenerated -> [DisplayName] -> Label Parameter</li>
        </ul>
        <EditString @bind-Value="_model.BasicLabel"
                    Field="@(() => _model.BasicLabel)"/>

        <EditString @bind-Value="_model.OverridenLabel"
                    Field="@(() => _model.OverridenLabel)"/>

        <EditString @bind-Value="_model.DisplayNameHtmlFromAttribute"
                    Field="@(() => _model.DisplayNameHtmlFromAttribute)" />

        <EditString @bind-Value="_model.LabelParameter"
                    Field="@(() => _model.LabelParameter)"
                    Label="Label set in the  <span style='color: green'>Label parameter</span> within the <span style='color: magenta'>razor/html</span>" />
    </div>

    <div class="demo-section"  >
        <h2>required-star</h2>
        <p>Visual indicator to show if a property is required. Automatic from [Required] attribute, dynamic using the IsRequired parameter.</p>
        <EditString @bind-Value="_model.RequiredAttribute"
                    Field="@(() => _model.RequiredAttribute)" />

        <EditString @bind-Value="_model.DynamicRequired"
                    Field="@(() => _model.DynamicRequired)"
                    IsRequired="@IsCurrentlyRequired" />

        <style>.moveup {margin-top: -16px; padding-left: 8px }</style>
        <EditBool @bind-Value="IsCurrentlyRequired"
                  Field="@(() => IsCurrentlyRequired)" 
                  ContainerClass="moveup"/>

        <h2>Description</h2>
        <p>Shown between the label and the input. Set by attribute or Description parameter. </p>
        <EditString @bind-Value="_model.DescriptionAttribute"
                    Field="@(() => _model.DescriptionAttribute)" />

        <EditString @bind-Value="_model.DescriptionOverride"
                    Field="@(() => _model.DescriptionOverride)"
                    Description="Description set within <strong style='color: blue'> razor/html </strong>." />

    </div>

    
    <div class="demo-section" >
        <h2>Validation</h2>
        <ul>
            <li>Validation messages are shown below the input when active.</li>
            <li>Created using DataAnnotations.</li>
            <li>Requires the DataAnnotationsValidator or ObjectGraphDataAnnotationsValidator  </li>
            <li>ObjectGraphDataAnnotationsValidator can be used for nested object validation</li>
            <li>Default error messages exist. Many default error messages from DataAnnotations are overridden.</li>
            <li>Validation messages can be customized using the ErrorMessage parameter.</li>
            <li>Many default error messages have different forms in screen readers to read the name of the property before the message.</li>
        </ul>
        <EditString @bind-Value="_model.ValidationExample"
                    Field="@(() => _model.ValidationExample)"/>

    </div>

    <div class="demo-section" >
        <h2>Hiding</h2>
        <ul>
            <li>The HidingMode parameter can be used for hiding based on the value of the target property.</li>
            <li>IsHidden can be used to hide based on another boolean property.</li>
        </ul>
        <EditBool @bind-Value="_model.IsHidden"
                  Field="@(() => _model.IsHidden)"
                  Label="Toggle hiding of the following control" />
        <EditString @bind-Value="_model.CanBeHidden"
                    Field="@(() => _model.CanBeHidden)"
                    IsHidden=@_model.IsHidden />
    </div>

</EditForm>

@code {
    readonly DemoFormLabelModel _model = new();
    public bool IsCurrentlyRequired { get; set; } = true;

    EditForm? _form;
    protected override void OnAfterRender(bool firstRender) => _form?.EditContext!.Validate();

    public class DemoFormLabelModel
    {
        // Labels
        [Description("This is the default / auto-generated label")]
        public string BasicLabel { get; set; } = "";

        [DisplayName("[DisplayName] attribute")]
        [Description("This label is set by the [DisplayName] attribute.")]
        public string OverridenLabel { get; set; } = "";

        [DisplayName("<span style='color: blue'> [DisplayName] </span> with <strong style='color: green'>html/css</strong>")]
        [Description("This label has embedded html/css in the [DisplayName]")]
        public string DisplayNameHtmlFromAttribute { get; set; } = "";

        [Description("Parameter 'Label' within the razor/html file")]
        public string LabelParameter { get; set; } = "";

        // Required-star
        [Required, DisplayName("[Required] attribute")]
        public string RequiredAttribute { get; set; } = "";
        public string DynamicRequired { get; set; } = "";

        // Description
        [Description("Description set by <strong style='color: orange'> [Description] </strong> attribute.")]
        public string DescriptionAttribute { get; set; } = "";
        public string DescriptionOverride { get; set; } = "";

        // Validation
        [Required(ErrorMessage = "This field is required for validation example.")]
        [MinLength(3)]
        [MaxLength(5)]
        public string ValidationExample { get; set; }

        // Hiding
        public string CanBeHidden { get; set; } = "This can be hidden";
        public bool IsHidden { get; set; } = false;

    }
}