@inherits InputDate<T>
@using Microsoft.AspNetCore.Components.Forms
@typeparam T

@if (ShouldShowComponent)
{
    <div class="form-group">
        <FormLabel Id=@_id FieldIdentifier=@_fieldIdentifier Attributes=@_attributes Label=@Label/>

        @if (ShowEditor)
        {
            <InputDate @bind-Value="CurrentValue" id=@_id data-test-id=@_id Type=Type class=@CssClass disabled=@IsDisabled/>
        }
        else
        {
            <div class="form-text @CssClass">
                @DateTime.Parse(CurrentValueAsString).ToString(DateFormat)
            </div>
        }

        <FieldValidationDisplay FieldIdentifier=_fieldIdentifier Attributes=_attributes/>
    </div>
}

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public required Expression<Func<T>> Field { get; set; }
    [Parameter] public bool IsEditMode { get; set; } = true;
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string DateFormat { get; set; } = "MM/dd/yyyy";

    string _id = string.Empty;
    List<Attribute>? _attributes;
    FieldIdentifier _fieldIdentifier;
    
    [CascadingParameter] public FormOptions? FormOptions { get; set; }
    bool ShowEditor => (IsEditMode && FormOptions == null) || (IsEditMode && FormOptions!.IsEditMode);
    bool ShouldShowComponent => true;
    
    // Get validation messages for FieldName
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _fieldIdentifier = FieldIdentifier.Create(Field);
        _attributes = AttributesHelper.GetExpressionCustomAttributes(Field);
        _id = AttributesHelper.GetId(Id, _fieldIdentifier);
    }
}