@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Forms
<div class="form-group">
    <FormLabel Id=@_id Name=@_name IsRequired=@_isRequired Description=@_description />

    <select @bind:get=Value @bind:set=SetAsync @bind:event="onchange" class="form-select">
        @foreach (var x in Options)
        {
            <option value=@x>@x.Name</option>
        }
    </select> 

    <FieldValidationDisplay EditContext=EditContext FieldIdentifier=_fieldIdentifier Attributes=_attributes />
</div>

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public Expression<Func<int>> Field { get; set; }
    
    /// <summary> The enum type to provide the values for, must match the Value Parameter </summary>
    [Parameter] public Type Type { get; set; }
    [Parameter] public int Value { get; set; }
    [Parameter] public EventCallback<int> ValueChanged { get; set; }

    [CascadingParameter] private EditContext? EditContext { get; set; }

    [Parameter] public List<IIntIdAndName> Options { get; set; }
    
    bool _isRequired;
    string _id = string.Empty;
    string _name = string.Empty;
    string? _description;
    List<Attribute>? _attributes;
    FieldIdentifier _fieldIdentifier;

    // Get validation messages for FieldName
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _fieldIdentifier = FieldIdentifier.Create(Field);
        _attributes = AttributesHelper.GetExpressionCustomAttributes(Field);
        _name = AttributesHelper.GetLabelText(_attributes, _fieldIdentifier);
        _id = AttributesHelper.GetId(Id, _name);
        _description = AttributesHelper.GetDescription(_attributes);
        _isRequired = AttributesHelper.GetIsRequired(_attributes);
    }
    async Task SetAsync(int value) => await ValueChanged.InvokeAsync(value);


}