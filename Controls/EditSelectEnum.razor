@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms
@typeparam TEnum

@inherits InputBase<TEnum>

<div class="form-group">
    <FormLabel Id=@_id FieldIdentifier=@_fieldIdentifier Attributes=@_attributes Label=@Label />
    
    @if(IsEditMode)
    {
        <select @bind:get=Value @bind:set=SetAsync @bind:event="onchange" class=@CssClass id=@_id data-test-id=@_id>
            @foreach (var x in Enum.GetValues(Type))
            {
                <option title=@_attributes.ToolTip() data-test-id=@($"{_id}-option-{x}") id=@($"{_id}-option-{x}") value=@x>@x.GetName()</option>
            }
        </select> 
    } else
    {
        <div class="form-text">@Value</div>
    }

    <FieldValidationDisplay FieldIdentifier=_fieldIdentifier Attributes=_attributes />
</div>

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public required Expression<Func<TEnum>> Field { get; set; }
    [Parameter] public bool IsEditMode { get; set; } = true;

    /// <summary> The enum type to provide the values for, must match the Value Parameter </summary>
    [Parameter] public required Type Type { get; set; }
    [Parameter] public string? Label { get; set; }
    
    bool _isRequired;
    string _id = string.Empty;
    List<Attribute>? _attributes;
    FieldIdentifier _fieldIdentifier;

    // Get validation messages for FieldName
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _fieldIdentifier = FieldIdentifier.Create(Field);
        _attributes = AttributesHelper.GetExpressionCustomAttributes(Field);
        _id = AttributesHelper.GetId(Id, _fieldIdentifier);
    }
    async Task SetAsync(TEnum value) => await ValueChanged.InvokeAsync(value);
    protected override bool TryParseValueFromString(string value, out TEnum result, out string validationErrorMessage)
    {
        // Let's Blazor convert the value for us 
        if (BindConverter.TryConvertTo(value, CultureInfo.CurrentCulture, out TEnum parsedValue))
        {
            result = parsedValue;
            validationErrorMessage = null;
            return true;
        }

        // Map null/empty value to null if the bound object is nullable
        if (string.IsNullOrEmpty(value))
        {
            var nullableType = Nullable.GetUnderlyingType(typeof(TEnum));
            if (nullableType != null)
            {
                result = default;
                validationErrorMessage = null;
                return true;
            }
        }

        // The value is invalid => set the error message
        result = default;
        validationErrorMessage = $"The {FieldIdentifier.FieldName} field is not valid.";
        return false;
    }
}