@using Microsoft.AspNetCore.Components.Forms
@typeparam T

<div class="form-group">
    <FormLabel Id=@_id FieldIdentifier=_fieldIdentifier Attributes=_attributes  />

    <select @bind:get=Value @bind:set=SetAsync @bind:event="onchange" class="form-select @Css">
        @foreach (var x in Enum.GetValues(Type))
        {
            <option title=@_attributes.ToolTip() value=@x>@x.GetName()</option>
        }
    </select> 

    <FieldValidationDisplay FieldIdentifier=_fieldIdentifier Attributes=_attributes />
</div>

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public required Expression<Func<T>> Field { get; set; }
    [Parameter] public string Css { get; set; } = "";
    
    /// <summary> The enum type to provide the values for, must match the Value Parameter </summary>
    [Parameter] public Type Type { get; set; }
    [Parameter] public T Value { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }

    [CascadingParameter] private EditContext? EditContext { get; set; }
    
    bool _isRequired;
    string _id = string.Empty;
    List<Attribute>? _attributes;
    FieldIdentifier _fieldIdentifier;

    // Get validation messages for FieldName
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _fieldIdentifier = FieldIdentifier.Create(Field);
        _attributes = AttributesHelper.GetExpressionCustomAttributes(Field);
        _id = AttributesHelper.GetId(Id, _fieldIdentifier);
    }
    async Task SetAsync(T value) => await ValueChanged.InvokeAsync(value);
}