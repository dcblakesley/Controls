@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Rendering



    @foreach (var v in FormOptions.FieldIdentifiers)
    {
        @foreach (var z in CurrentEditContext.GetValidationMessages(v).ToList())
        {
            <li>
                <a href="#lbl-@v.FieldName">@v.FieldName</a>
                <span>@z</span>

            </li>
        }
    }
        

@code
{
    //public class ValidationSummary : ComponentBase, IDisposable

    [CascadingParameter] public FormOptions? FormOptions { get; set; }
    private EditContext? _previousEditContext;
    private EventHandler<ValidationStateChangedEventArgs> _validationStateChangedHandler;

    /// <summary>
    /// Gets or sets the model to produce the list of validation messages for.
    /// When specified, this lists all errors that are associated with the model instance.
    /// </summary>
    [Parameter]
    public object? Model { get; set; }

    /// <summary>
    /// Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    [CascadingParameter] EditContext CurrentEditContext { get; set; } = default!;

    IEnumerable<string> ValidationMessages => Model is null ? CurrentEditContext.GetValidationMessages() : CurrentEditContext.GetValidationMessages(new FieldIdentifier(Model, string.Empty));
    
    protected override Task OnInitializedAsync()
    {
        _validationStateChangedHandler = (sender, eventArgs) => StateHasChanged();
        return base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        if (CurrentEditContext == null)
        {
            throw new InvalidOperationException($"{nameof(ValidationSummary)} requires a cascading parameter " +
                                                $"of type {nameof(EditContext)}. For example, you can use {nameof(ValidationSummary)} inside " +
                                                $"an {nameof(EditForm)}.");
        }

        if (CurrentEditContext != _previousEditContext)
        {
            DetachValidationStateChangedListener();
            CurrentEditContext.OnValidationStateChanged += _validationStateChangedHandler;
            _previousEditContext = CurrentEditContext;
        }
    }



    // protected override void BuildRenderTree(RenderTreeBuilder builder)
    // {
    //     // As an optimization, only evaluate the messages enumerable once, and
    //     // only produce the enclosing <ul> if there's at least one message
    //     var validationMessages = Model is null ? CurrentEditContext.GetValidationMessages() : CurrentEditContext.GetValidationMessages(new FieldIdentifier(Model, string.Empty));

    //     var first = true;
    //     foreach (var error in validationMessages)
    //     {
    //         if (first)
    //         {
    //             first = false;
    //             builder.OpenElement(0, "ul");
    //             builder.AddAttribute(1, "class", "validation-errors");
    //             builder.AddMultipleAttributes(2, AdditionalAttributes);
    //         }

    //         builder.OpenElement(3, "li");
    //         builder.AddAttribute(4, "class", "validation-message");
    //         builder.AddContent(5, error);
    //         builder.CloseElement();
    //     }

    //     if (!first)
    //     {
    //         // We have at least one validation message.
    //         builder.CloseElement();
    //     }
    // }


    private void DetachValidationStateChangedListener()
    {
        if (_previousEditContext != null)
        {
            _previousEditContext.OnValidationStateChanged -= _validationStateChangedHandler;
        }
    }

}
